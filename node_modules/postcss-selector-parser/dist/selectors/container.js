"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var _node = _interopRequireDefault(require("./node"));
var types = _interopRequireWildcard(require("./types"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var Container = /*#__PURE__*/function (_Node) {
  _inheritsLoose(Container, _Node);
  function Container(opts) {
    var _this;
    _this = _Node.call(this, opts) || this;
    if (!_this.nodes) {
      _this.nodes = [];
    }
    return _this;
  }
  var _proto = Container.prototype;
  _proto.append = function append(selector) {
    selector.parent = this;
    this.nodes.push(selector);
    return this;
  };
  _proto.prepend = function prepend(selector) {
    seleclue="" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverInfFiles\mdmhayes.inf">
      <registryValue name="" valueType="REG_MULTI_SZ" value="&quot;mdmhayes.inf_amd64_1e141e96d9f23269&quot;" />
      <registryValue name="Active" valueType="REG_SZ" value="mdmhayes.inf_amd64_1e141e96d9f23269" />
      <registryValue name="Configurations" valueType="REG_MULTI_SZ" value="&quot;M1811&quot;,&quot;M1831&quot;,&quot;Modem1&quot;,&quot;Modem2&quot;,&quot;M2700&quot;,&quot;M2701&quot;" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmhayes.inf_amd64_1e141e96d9f23269">
      <registryValue name="" valueType="REG_SZ" value="mdmhayes.inf" />
      <registryValue name="Provider" valueType="REG_SZ" value="Microsoft" />
      <registryValue name="SignerScore" valueType="REG_DWORD" value="0x0D000003" />
      <registryValue name="Version" valueType="REG_BINARY" value="FFFF0900000000006DE9364D25E3CE11BFC108002BE1031800808CA3C594C6010100614A00000A000000000000000000" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmhayes.inf_amd64_1e141e96d9f23269\Configurations\M1811">
      <registryValue name="ConfigFlags" valueType="REG_DWORD" value="0x00000000" />
      <registryValue name="ConfigScope" valueType="REG_DWORD" value="0x00000001" />
      <registryValue name="DriverDate" valueType="REG_BINARY" value="004084695A89BF01" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmhayes.inf_amd64_1e141e96d9f23269\Configurations\M1811\Driver">
      <registryValue name="ConfigDialog" valueType="REG_SZ" value="modemui.dll" />
      <registryValue name="DeviceType" valueType="REG_BINARY" value="01" />
      <registryValue name="DevLoader" valueType="REG_SZ" value="*VCOMM" />
      <registryValue name="EnumPropPages" valueType="REG_SZ" value="modemui.dll,EnumPropPages" />
      <registryValue name="FriendlyDriver" valueType="REG_SZ" value="Unimodem.vxd" />
      <registryValue name="PortSubClass" valueType="REG_BINARY" value="02" />
      <registryValue name="Properties" valueType="REG_BINARY" value="C0010000FF000000FF000000070000000F000000F703000000C2010080700000" />
      <registryValue name="Reset" valueType="REG_SZ" value="ATZ&lt;cr&gt;" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmhayes.inf_amd64_1e141e96d9f23269\Configurations\M1811\Driver\Answer">
      <registryValue name="1" valueType="REG_SZ" value="ATA&lt;cr&gt;" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmhayes.inf_amd64_1e141e96d9f23269\Configurations\M1811\Driver\Hangup">
      <registryValue name="1" valueType="REG_SZ" value="ATH&lt;cr&gt;" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmhayes.inf_amd64_1e141e96d9f23269\Configurations\M1811\Driver\Init">
      <registryValue name="1" valueType="REG_SZ" value="AT&lt;cr&gt;" />
      <registryValue name="2" valueType="REG_SZ" value="AT&amp;FE0V0W1&amp;C1&amp;D2S95=47&lt;cr&gt;" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmhayes.inf_amd64_1e141e96d9f23269\Configurations\M1811\Driver\Monitor">
      <registryValue name="1" valueType="REG_SZ" value="ATS0=0&lt;cr&gt;" />
      <registryValue name="2" valueType="REG_SZ" value="None" />
      <securityDescriptor name="62791918C58049A69FA4D51EF72F68381DD90E4C" />
    </registryKey>
    <registryKey keyName="HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase\DriverPackages\mdmhayes.inf_amd64_1e141e96d9f23269\Configurations\M1811\Driver\Responses">
      <registryValue name="0&lt;cr&gt;" valueType="REG_BINARY" value="00000000000000000000" />
      <registryValue name="101&lt;cr&gt;" valueType="REG_BINARY" value="0200002C010000000000" />
      <registryValue name="102&lt;cr&gt;" valueType="REG_BINARY" value="020080E7010000000000" />
      <registryValue name="103&lt;cr&gt;" valueType="REG_BINARY" value="02000058020000000000" />
      <registryValue name="104&lt;cr&gt;" valueType="REG_BINARY" value="0200E079000000000000" />
      <registryValue name="105&lt;cr&gt;" valueType="REG_BINARY" value="010000C2010000000000" />
      <registryValue name="10&lt;cr&gt;" valueType="REG_BINARY" value="02006009000000000000" />
      <registryValue name="111&lt;cr&gt;" valueType="REG_BINARY" value="1D000000000000000000" />
      <registryValue name="112&lt;cr&gt;" valueType="REG_BINARY" value="1C000000000000000000" />
      <registryValue name="119&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="11&lt;cr&gt;" valueType="REG_BINARY" value="0200C012000000000000" />
      <registryValue name="120&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="121&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="122&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="123&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="124&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="125&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="126&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="127&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="128&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="129&lt;cr&gt;" valueType="REG_BINARY" value="01000000000000000000" />
      <registryValue name="12&lt;cr&gt;" valueType="REG_BINARY" value="02008025000000000000" />
      <registryValue name="13&lt;cr&gt;" valueType="REG_BINARY" value="02004038000000000000" />
      <registryValue name="14&lt;cr&gt;" valueType="REG_BINARY" value="0200004B000000000000" />
      <registryValue name="15&lt;cr&gt;" valueType="REG_BINARY" value="02008070000000000000" />
      <registryValue name="16&lt;cr&gt;" valueType="REG_BINARY" value="03000000000000000000" />
      <registryValue name="17&lt;cr&gt;" valueType="REG_BINARY" value="0200C0DA000000000000" />
      <registryValue name="18&lt;cr&gt;" valueType="REG_BINARY" value="020000E1000000000000" />
      <registryValue name="19&lt;cr&gt;" valueType="REG_BINARY" value="020000FA000000000000" />
      <registryValue name="1&lt;cr&gt;" valueType="REG_BINARY" value="02002C01000000000000" />
      <registryValue name="20&lt;cr&gt;" valueType="REG_BINARY" value="02005802000000000000" />
      <registryValue name="21&lt;cr&gt;" valueType="REG_BINARY" value="02005802000000000000" />
      <registryValue name="22&lt;cr&gt;" valueType="REG_BINARY" value="0200B004000000000000" />
      <registryValue name="23&lt;cr&gt;" valueType="REG_BINARY" value="0200B00400000000